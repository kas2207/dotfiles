// Kyle's conkerorrc -*- js2 -*-


require("new-tabs.js");
require("session.js");
require("mode-line.js");
load_paths.unshift("chrome://conkeror-contrib/content/");
require("mode-line-buttons.js");
require("github");
require("gmail");
//google_search_bind_number_shortcuts();

// Save Session
var session_auto_save_file = "auto-save";
var session_auto_save_auto_load = true;

// Hinting
hint_digits="abcdefghijklmnopqrstuvwxyz";
hints_minibuffer_annotation_mode(true);

// History
url_completion_use_history = true;

define_browser_object_class(
    "history-url", null, 
    function (I, prompt) {
        check_buffer (I.buffer, content_buffer);
        var result = yield I.buffer.window.minibuffer.read_url(
            $prompt = prompt,  $use_webjumps = false, $use_history = true, $use_bookmarks = false);
        yield co_return (result);
    });

interactive("find-url-from-history",
            "Find a page from history in the current buffer",
            "find-url",
            $browser_object = browser_object_history_url);

interactive("find-url-from-history-new-buffer",
            "Find a page from history in the current buffer",
            "find-url-new-buffer",
            $browser_object = browser_object_history_url);

define_key(content_buffer_normal_keymap, "h", "find-url-from-history-new-buffer");
define_key(content_buffer_normal_keymap, "H", "find-url-from-history");

session_pref('browser.history_expire_days', 7);

// Emacs as external editor
editor_shell_command = "emacs";
view_source_use_external_editor = true;

// Mode Line
mode_line_add_buttons(standard_mode_line_buttons, true);
remove_hook("mode_line_hook", mode_line_adder(current_buffer_scroll_position_widget));
remove_hook("mode_line_hook", mode_line_adder(clock_widget));

// Webjumps
define_webjump("python3", "http://docs.python.org/py3k/search.html?q=%s");
define_webjump("github", "http://github.com");
define_webjump("planet-emacs", "http://planet.emacsen.org/");
define_webjump("safari", "http://safaribooksonline.com");

//User Agent
session_pref("general.useragent.compatMode.firefox", true);

/*
  Implements new login-manager.
  See:
  - http://librelist.com/browser//conkeror/2013/11/28/login-manager-xulrunner-24-0/
  - https://blog.mozilla.org/dolske/2013/08/21/a-change-in-password-manager/
  (C) Copyright 2014 thorkill
  BSD License
*/

let Cu = Components.utils;
Cu.import("resource://gre/modules/XPCOMUtils.jsm");
XPCOMUtils.defineLazyModuleGetter(this,
                                  "LoginManagerContent",
                                  "resource://gre/modules/LoginManagerContent.jsm");
XPCOMUtils.defineLazyModuleGetter(this,
                                  "LoginManagerParent",
                                  "resource://gre/modules/LoginManagerParent.jsm");

define_buffer_local_hook("content_buffer_dom_form_has_password_hook");
define_buffer_local_hook("content_buffer_dom_auto_complete_hook");

// passwords
session_pref("signon.rememberSignons", true);
session_pref("signon.expireMasterPassword", false);
session_pref("signon.SignonFileName", "signons.txt");
session_pref("signon.useDOMFormHasPassword", true);

Cc["@mozilla.org/login-manager;1"].getService(Ci.nsILoginManager);

/* debugging prefs */
//session_pref("browser.formfill.debug", false);
//session_pref("browser.dom.window.dump.enabled", true);
//session_pref("javascript.options.showInConsole", true);
//session_pref("javascript.options.strict", true);
//session_pref("nglayout.debug.disable_xul_cache", true);
//session_pref("nglayout.debug.disable_xul_fastload", true);

LoginManagerParent.init();

add_hook("create_buffer_hook", function (buffer) {

        buffer.browser.addEventListener("DOMFormHasPassword", function(event) {
            content_buffer_dom_form_has_password_hook.run(buffer, event);
        }, true /* captrue */);

        buffer.browser.addEventListener("DOMAutoComplete", function(event) {
            content_buffer_dom_auto_complete_hook.run(buffer, event);
        }, true /* captrue */);

        buffer.browser.addEventListener("blur", function(event) {
            content_buffer_dom_auto_complete_hook.run(buffer, event);
        }, true /* captrue */);

        buffer.browser.addEventListener("change", function(event) {
            content_buffer_dom_auto_complete_hook.run(buffer, event);
        }, true /* captrue */);

});

add_hook("content_buffer_dom_form_has_password_hook", function(buffer, event) {
    // Sometimes onFormPassword is undefined
    if (LoginManagerContent.onFormPassword) {
        LoginManagerContent.onFormPassword(event);
    }
});

add_hook("content_buffer_dom_auto_complete_hook", function(buffer, event) {
        LoginManagerContent.onUsernameInput(event);
});
